// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum SubscriptionTier {
  BASIC
  PREMIUM
}

enum SubscriptionType {
  NONE
  MONTHLY
  YEARLY
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  image     String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bio       String?
  isOnline  Boolean  @default(false)

  resetToken           String? @unique
  resetTokenExpireDate BigInt?

  verificationToken          String? @unique
  verificationTokenExpiresAt BigInt?

  FriendRequestSent     FriendRequest[] @relation("RequestsSent")
  FriendRequestRecieved FriendRequest[] @relation("RequestsReceived")

  friendshipSent     Friendship[]     @relation("MessageSent")
  friendshipReceived Friendship[]     @relation("MessageReceived")
  customerId         String?          @unique
  subscriptionTier   SubscriptionTier @default(BASIC)
  subscriptionType   SubscriptionType @default(NONE)

  // Providers information
  accounts Accounts[]
}

model Accounts {
  id           String  @id @default(uuid())
  provider     String
  providerId   String
  accessToken  String?
  refreshToken String?
  userId       String
  user         User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id     String        @id @default(cuid())
  status RequestStatus @default(PENDING)

  toUserId String
  toUser   User   @relation("RequestsReceived", fields: [toUserId], references: [id])

  fromUserId String
  fromUser   User   @relation("RequestsSent", fields: [fromUserId], references: [id])

  @@unique([toUserId, fromUserId])
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum DataType {
  TEXT
  IMAGE
}

model Friendship {
  id       String   @id @default(cuid())
  content  String
  type     DataType @default(TEXT)
  senderId String
  sender   User     @relation("MessageSent", fields: [senderId], references: [id])

  receiverId String
  receiver   User   @relation("MessageReceived", fields: [receiverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status MessageStatus @default(SENT)
}
